import websocket
import ssl
from google.protobuf.json_format import MessageToDict
import kuaishou_pb2
from browse_token import get_live_info
import time

try:
    import thread
except ImportError:
    import _thread as thread


def on_message(ws, websocket):

    Message = kuaishou_pb2.SocketMessage()
    Message.ParseFromString(websocket)
    if Message.payloadType == 310:
        SCWebFeedPUsh = kuaishou_pb2.SCWebFeedPush()
        SCWebFeedPUsh.ParseFromString(Message.payload)
        obj = MessageToDict(SCWebFeedPUsh, preserving_proto_field_name=True)
        if obj.get('commentFeeds', ''):
            msg_list = obj.get('commentFeeds', '')
            for i in msg_list:
                userName = i['user']['userName']
                pid = i['user']['principalId']
                content = i['content']
                print("%s  -->  %s  -->  %s" % (userName, pid, content))
        if obj.get('giftFeeds', ''):
            msg_list = obj.get('giftFeeds', '')
            for i in msg_list:
                userName = i['user']['userName']
                pid = i['user']['principalId']
                print("%s  -->  %s" % (userName, pid))
        if obj.get('likeFeeds', ''):
            msg_list = obj.get('likeFeeds', '')
            for i in msg_list:
                userName = i['user']['userName']
                pid = i['user']['principalId']
                print("%s -->  %s" % (userName, pid))


def on_error(ws, error):
    print(f"Error: {error}")


def on_close(ws, close_status_code, close_msg):
    ws.run_forever(sslopt={"cert_reqs": ssl.CERT_NONE})


def hex_(n):
    res = []
    while n > 128:
        res.append(int((n & 127) | 128))
        n = n >> 7
    res.append(int(n))
    return res


def on_open(ws, token, liveStreamId):
    part1 = [0x08, 0xC8, 0x01, 0x1A, 0xC9, 0x01, 0x0A, 0x98, 0x01]  # 不变的头
    part2 = [ord(c) for c in token]
    part3 = [0x12, 0x0B]
    part4 = [ord(c) for c in liveStreamId]
    part5 = [ord(c) for c in 'B']
    part6 = [0x0b]
    part7 = [ord(c) for c in 'KUAISHOU_H5J']
    part8 = [0x12]
    part9 = [ord(c) for c in 'OUTSIDE_ANDROID_H5']
    d = part1 + part2 + part3 + part4 + part5 + part6 + part7 + part8 + part9
    d = bytes(d)
    ws.send(d, websocket.ABNF.OPCODE_BINARY)

    def run():
        while True:
            time.sleep(20)
            # 发送心跳-当前时间戳-毫秒
            head = [0x08, 0x01, 0x1A, 0x07, 0x08]
            timestamp = int(time.time() * 1000)
            time_arr = hex_(timestamp)
            heartbeat = bytes(head + time_arr)
            ws.send(heartbeat, websocket.ABNF.OPCODE_BINARY)

    thread.start_new_thread(run, ())


if __name__ == "__main__":

    room_number='Yijia157359' # 设置直播间id
    liveStreamId, kwaiId, token, webSocketAddresses = get_live_info(room_number)
    websocket.enableTrace(True)
    ws = websocket.WebSocketApp(webSocketAddresses,
                                header=[
                                    "Pragma: no-cache",
                                    "Origin: https://livev.m.chenzhongtech.com",
                                    "Accept-Language: zh-CN,zh;q=0.9,ja;q=0.8,sq;q=0.7,he;q=0.6",
                                    "Sec-WebSocket-Key: B/qwGkSv37yD2+r1/5bGSw==",
                                    "User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1",
                                    "Upgrade: websocket",
                                    "Cache-Control: no-cache",
                                    "Connection: Upgrade",
                                    "Sec-WebSocket-Version: 13",
                                    "Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits"
                                ],
                                on_message=on_message,
                                on_error=on_error,
                                on_close=on_close)

    ws.on_open = lambda ws: on_open(ws, token, liveStreamId)
    ws.run_forever(sslopt={"cert_reqs": ssl.CERT_NONE})

    # message = ''
    #
    # d = bytes.fromhex(message)
    # print(d)
